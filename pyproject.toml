# This file is the modern replacement for setup.py, used to configure how your Python package is built.
# 
# https://packaging.python.org/en/latest/discussions/setup-py-deprecated/#setup-py-deprecated
#
# https://packaging.python.org/en/latest/specifications/pyproject-toml/
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#a-full-example
# 
# The [build-system] section specifies the build system requirements.
# "setuptools.build_meta" is the default backend used by setuptools for building projects.
# You can add other build like 'mesonpy' dependencies as needed.
# 
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
# https://setuptools.pypa.io/en/stable/userguide/declarative_config.html#metadata
# 
# SciPy probably the most complex project using Meson and meson-python.
# It combines CPython extensions and libraries written in C, C++, Fortran, Cython, and Pythran.
#
# https://mesonbuild.com/meson-python/tutorials/introduction.html
# https://mesonbuild.com/meson-python/projects-using-meson-python.html
#
# https://setuptools.pypa.io/en/stable/build_meta.html#dynamic-build-dependencies-and-other-build-meta-tweaks
[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=70.0",
  "wheel",
  "numpy>=1.23.5",
  "scipy>=1.6.0",
  "matplotlib>=3.5",
]

[tool.setuptools.packages.find]
where   = ["."]
include = [
  "scikitplot",
]
exclude = [
  "auto_building_tools",
  "docs", "docs.*",
  "examples", "examples.*",
  "galleries", "galleries.*",
  "notebooks", "notebooks.*",
  "tests", "tests.*",
  "paper", "paper.*",
  "binder", "binder.*",
  "register",
  "fixtures",
  "bin",
]

[tool.setuptools.dynamic]
version = {attr = "scikitplot.__version__"}

# The [project] section contains metadata about your project.
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html
# https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html#dynamic-metadata
[project]
name = "scikit-plots"                       # The name of your project
dynamic = ["version"]                       # Determined dynamically, inside one of meson.build, setup.cfg, setuptools.dynamic
description = "An intuitive library to add plotting functionality to scikit-learn objects."

# Keywords to describe your project, useful for searchability
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#keywords
# https://packaging.python.org/en/latest/specifications/core-metadata/#keywords
keywords = [
  "data science",
  "machine learning",
  "visualization",
  "matplotlib",
  "scikit-learn",
  "xgboost",
  "catboost",
  "tensorflow",
  "keras",
  "pytorch",
  "transformers",
]
# Classifiers help users understand the maturity, audience,
# and compatible environments for your project.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
# https://packaging.python.org/en/latest/specifications/core-metadata/#classifier-multiple-use
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  'License :: OSI Approved :: BSD License',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.5",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.14",
  "Topic :: Scientific/Engineering :: Visualization",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

# The readme file this is what users will see on your project's PyPI page.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#readme
# [[project.readme]]  # Usage individually, If Needed
# file = "README.md"
# content-type = "text/x-rst"
# readme = "README.md"
readme = {file = "README.md", content-type = "text/markdown"}

# License information is critical. It's recommended to specify the license file.
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license-file-multiple-use
# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
# at that point, no longer include them in `py3.install_sources()`
# [[project.license]]  # Usage individually, If Needed
license = {file = "LICENSE"}  # Primary license file

# List the authors of the project
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#authors-maintainers
# [[project.authors]]  # Usage individually, If Needed
authors = [
  # {name = "scikit-plots developers", email=""},
  # {name = "Reiichiro Nakano et al.", email = "reiichiro.s.nakano@gmail.com"},
  # {name = "Prateek Sharma", email = "s.prateek3080@gmail.com"},
  # ...
]
# Project maintainers
# [[project.maintainers]]  # Usage individually, If Needed
maintainers = [
  # {name = "scikit-plots developers", email=""},
]

# Specify the minimum Python version required
# https://packaging.python.org/en/latest/specifications/core-metadata/#requires-python
requires-python = ">=3.8"

dependencies = [
  # Replace these with the actual dependencies from requirements.txt
  "matplotlib>=3.5",
  "scikit-learn>=1.1",
  "scipy>=1.6.0",
  "joblib>=1.2.0", 
  "pandas>=1.5.1",
]

# Development dependencies (for linting, type checking, and general dev tools)
# https://setuptools.pypa.io/en/stable/userguide/dependency_management.html#optional-dependencies
# https://peps.python.org/pep-0508/
# https://peps.python.org/pep-0735/#deferred-ideas
[project.optional-dependencies]
dev = [
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "mypy>=1.9.0",                            # Type checking
  "pycodestyle",                            # PEP-8 compliance
  "ruff>=0.5.1",                            # Linting
  "cython-lint>=0.12.2",                    # Linting for Cython
  "black>=24.3.0",                          # Code formatting
  "doit>=0.36.0",                           # Task automation
  "typing_extensions",                      # Backports for older Python versions
  "pydevtool",                              # Development tools
  "types-psutil",                           # Type stubs for psutil
  "rich-click",                             # Enhanced CLI
]
# Build dependencies (for packaging and building extensions)
build = [
  "pre-commit",                             # Git hook scripts are useful for identifying simple issues before submission to code review. ".pre-commit-config.yaml"
  "setuptools>=70.0",  
  "wheel",
  "numpy>=1.23.5",
  "scipy>=1.6.0",
  "pandas>=1.5.1",
  "matplotlib>=3.5",
  "build",                                  # Standard Python build tool
  "twine",                                  # Upload to PyPI
]
# Testing dependencies
test = [
  "pytest>=7.1.2",                          # Core testing framework
  "pytest-cov>=2.9.0",                      # Coverage reports
  "pytest-xdist",                           # Use Multiple CPUs to speed up
  "pytest-mpl",                             # Matplotlib testing
  "hypothesis>=6.30",                       # Property-based testing
  "matplotlib>=3.5",                        # Plotting for tests
  "pandas>=1.5.1",                          # Data analysis for tests
  "pyarrow>=12.0.0",                        # Arrow format
  "polars>=0.20.30",                        # DataFrame library
  "pyamg>=4.0.0",                           # Algebraic multigrid solvers
  "pooch>=1.6.0",                           # Data downloading
  "scikit-learn>=1.1",                      # Machine learning
  "scikit-image>=0.17.2",                   # Image processing
  "catboost",                               # Gradient boosting
  "tensorflow",                             # Deep learning
  "aggdraw",
]
# Documentation dependencies
docs = [
  "pooch>=1.6.0",                           # Data management
  "packaging>=21",                          # Package utilities
  "numpydoc>=1.2.0",                        # Numpy-style docstrings
  "jinja2",                                 # Templating engine
  "sphinx>=5.0.0,<9.0.0",                   # Documentation generator
  "sphinx-rtd-theme",                       # ReadTheDocs theme
  "pydata-sphinx-theme",                    # PyData theme
  "sphinx-gallery",                         # Gallery examples
  "sphinx-prompt",                          # Shell prompts
  "sphinxext-opengraph",                    # Social media metadata
  "sphinx-copybutton",                      # Copy button for code blocks
  "sphinxcontrib-sass",                     # SASS support
  "sphinx-design",                          # Modern design elements
  "sphinx-remove-toctrees",                 # Customize toctrees
  "myst-parser",                            # Markdown support
  "myst-nb",                                # Jupyter Notebook integration
  "jupytext",                               # Text-based Notebook formats
  "jupyter-sphinx",                         # Jupyter integration
  "jupyterlite-sphinx",                     # JupyterLite integration
  "jupyterlite-pyodide-kernel",             # Pyodide support
  "intersphinx_registry",                   # Intersphinx management
  "colorspacious",                          # Color management
  "sphinxcontrib-svg2pdfconverter",         # SVG to PDF conversion
  "sphinxcontrib-inlinesyntaxhighlight",    # Inline syntax highlighting
  "sphinx-tabs",                            # Tabbed content
  "sphinx-tags",                            # Tagging support
  "matplotlib>=3.5",                        # Visualization
  "plotly>=5.10",                           # Interactive plotting
  "seaborn>=0.11",                          # Statistical plotting
  "pandas>=1.5",                            # Data analysis
  "polars>=0.20.30",                        # DataFrame library
  "pyarrow>=12.0.0",                        # Arrow format
  "Pillow>=9.1",                            # Image processing
  "scikit-image>=0.17.2",                   # Image processing
  "scikit-learn>=1.1",                      # Machine learning
  "tensorflow>=2.10",                       # Deep learning
]
# Maintenance tools
maintenance = [
  "conda-lock==2.5.7",                      # Dependency lock files for Conda
]

# Links to important pages related to the project
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
# https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
# https://packaging.python.org/en/latest/specifications/core-metadata/#deprecated-fields
[project.urls]
# homepage (Homepage)
homepage        = "https://scikit-plots.github.io"
# source (Source Code), repository, sourcecode, github
repository      = "https://github.com/scikit-plots/scikit-plots"
# download (Download), equivalent to Download-URL
download        = "https://github.com/scikit-plots/scikit-plots"
# changelog (Changelog), changes, whatsnew, history
# The changelog, really useful for ongoing users of your project
changelog       = "https://scikit-plots.github.io/dev/whats_new/index.html"
# releasenotes (Release Notes)
# documentation (Documentation), docs
documentation   = "https://scikit-plots.github.io"
# issues (Issue Tracker), "Bug Tracker"
# bugs, issue, tracker, issuetracker, bugtracker
issues          = "https://github.com/scikit-plots/scikit-plots/issues"
# funding (Funding), sponsor, donate, donation
# Donate        = "https://github.com/scikit-plots/scikit-plots#donate"
# Forum         = "https://github.com/orgs/scikit-plots/discussions"
# Forked        = "https://github.com/reiinakano/scikit-plot"

# Advanced plugins: Creating executable scripts
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#advanced-plugins
# https://setuptools.pypa.io/en/stable/userguide/entry_point.html#entry-points-syntax
# [project.scripts]
# my-script = "my_package.module:function"
# [project.scripts]
# spam-cli = "spam:main_cli"
# [project.gui-scripts]
# spam-gui = "spam:main_gui"
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

# Configuration for the pytest testing framework
[tool.pytest.ini_options]
minversion = "6.0"  # Specify the minimum version of pytest
addopts = "-ra -q"  # Add command-line options
testpaths = [
  "scikitplot",
]  # Directories where tests are located
# filterwarnings = [
#   "error",
#   'default:.*pyamg, which cannot \(yet\) be imported with NumPy >=2:RuntimeWarning'
# ]

# Black is a code formatter; this section configures its behavior.
[tool.black]
line-length = 100  # Maximum line length 88
target-version = ['py35', 'py310', 'py314']  # Python versions to target
preview = true     # Enable Black's preview features
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | builddir
  | build
  | dist
  | docs/build
  | docs/_build
  | docs/auto_examples
  | scikitplot/externals
  | asv_benchmarks/env
  | auto_building_tools/
)/
'''

[tool.ruff]
# max line length for black
line-length = 88
target-version = "py38"
exclude=[
  ".git",
  "__pycache__",
  "dist",
  "docs/build",
  "build",
]

[tool.ruff.lint]
# This enables us to use CPY001: copyright header check
preview = true
# This enables us to use the explicit preview rules that we want only
explicit-preview-rules = true
# all rules can be found here: https://beta.ruff.rs/docs/rules/
select = ["E", "F", "W", "I", "CPY001"]
ignore=[
  # space before : (needed for how black formats slicing)
  "E203",
  # do not assign a lambda expression, use a def
  "E731",
  # do not use variables named 'l', 'O', or 'I'
  "E741",
  # E721 is in preview (july 2024) and gives many false positives.
  # Use `is` and `is not` for type comparisons, or `isinstance()` for
  # isinstance checks
  "E721",
  # F841 is in preview (july 2024), and we don't care much about it.
  # Local variable ... is assigned to but never used
  "F841",
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ scikit\\-plots\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ BSD\\-3\\-Clause"

[tool.ruff.lint.per-file-ignores]
# It's fine not to put the import at the top of the file in the examples
# folder.
"galleries/*"=["E402"]
"docs/conf.py"=["E402"]
"docs/*"=["CPY001"]
"**/tests/*"=["CPY001"]
"tools/*"=["CPY001"]
".spin/*"=["CPY001"]
".github/*"=["CPY001"]
# __doc__ is too long (>4096 chars) and therefore false positive on copyright check
# "examples/model_selection/plot_precision_recall.py"=["CPY001"]
# __all__ has un-imported names
# "scikitplot/__init__.py"=["F822"]